/*! \page gestures Gestures, multipoint touch and cancel event handling

\section gesturesintro Gestures

A \a gesture is a high-level event that represents a series of user input. Qt and MeeGo Touch support the following gestures:

<table border=1 cellpadding=10 cellspacing=0>
<tr>
  <th>Gesture</th><th>User interaction</th><th>Class</th><th>Symbol</th>
</tr>
<tr>
  <td>Pan</td>
  <td>Press, drag, release</td>
  <td>QPanGesture</td>
  <td><img src="gesture-pan.png"></td>
</tr>
<tr>
  <td>Pinch</td>
  <td>Press (with two fingers), move fingers on surface,<br>optionally release one of the fingers and reposition, release</td>
  <td>QPinchGesture</td>
  <td><img src="gesture-pinch.png"></td>
</tr>
<tr>
  <td>Swipe</td>
  <td>Press, quick drag and release</td>
  <td>QSwipeGesture</td>
  <td><img src="gesture-swipe.png"></td>
</tr>
<tr>
  <td>Tap and hold</td>
  <td>Press, wait</td>
  <td>QTapAndHoldGesture</td>
  <td><img src="gesture-tapandhold.png"></td>
</tr>
<tr>
  <td>Tap</td>
  <td>Press, release</td>
  <td>QTapGesture</td>
  <td><img src="gesture-tap.png"></td>
</tr>
</table>

As a gesture is merely an interpreted series of input, the application determines what the gesture actually means.
For example, a pinch gesture may be used to either rotate or zoom a picture, or both. If combined, gestures may
have overlapping interactions, as is the case of swipe and pan. It is up to the application design to make sure
there are no overlapping interactions in UI (the result of overlapping interactions is undefined). Typically a
swipe gesture would be used in a UI where a flick should be interpreted as "next" or "previous", while a pan
gesture implies an event with acceleration such as scrolling a web page.

While all of the above gestures are touch-activated, gestures can potentially use any type of input such
as key events or sensor data. You can use the QGestureRecognizer framework to register new custom
gesture types.

The gesture events are generally not keeping track of the current screen orientation. The data delivered to
widgets are in screen's coordinate space. The gesture event user is responsible for transforming event data to
the current widget's coordinate space.

\section usedgestures Gestures used by MeeGo Touch

While gesture events are mainly meant for application consumption, the MeeGo Touch UI design guidelines
 specify some default actions based on gestures. Unless the application developer overrides the behaviour,
gestures may be consumed by the framework itself in the following cases:
- The MPannableViewport consumes QPanGesture events, most commonly in the case of a pannable MApplicationPage (pages are pannable by default).
- Any MWidget with one or more QActions or MActions added (using QGraphicsWidget::addAction) consumes a QTapAndHoldGesture and opens the contextual \a "Object Menu" for the widget when the gesture completes.

\section cancelevent Cancel event

Gestures used in MeeGo Touch library are strongly connected to Cancel event. The Cancel event is an event
specific to MeegGo Touch applications and is used to indicate that the sequence of mouse events delivered
to a widget was generated by a gesture.

Typical example of such scenario is a button widget. The user starts panning gesture in order to view different
area of the application and first presses his finger over a button. The sequence of events received by
the button is:
- Mouse press event - the user has put his finger on the screen.
- Mouse move event - the user has started moving his finger.
- Cancel event - the user has moved his finger far enough to recognize this sequence as pan gesture.

When the button widget receives the Cancel event, it is supposed to remove any visual feedback enabled while
mouse events were received without triggering any action. Received Cancel event means also that the mouse
release event is not going to be delivered to the widget.

Check MWidget::grabGestureWithCancelPolicy method documentation for details on how to enable cancel event
delivery for your widget.

\section multitouch Multipoint touch

While some of the gestures mentioned above (such as pinch) are implemented using multipoint touch events,
by itself multipoint touch merely refers to the capability of detecting several fingers on the screen at once.
Multipoint touch events are also directly accessible by applications in a low-level form comparable to mouse and
key presses and releases, where the actual interpretation of the events is left entirely up to you. Note: Multipoint touch requires special hardware to function, since many touch input devices are not capable of detecting multiple touch points at once.

In Qt, multipoint-touch input is delivered through the QTouchEvent class, through which it is possible to determine
all the currently touched screen points. 

Note: Since multipoint touch events are not delivered to widgets by default, the delivery must be explicitly enabled with the QGraphicsItem::setAcceptTouchEvents method.

\section simulatingmultitouch Simulating multipoint touch

You can simulate the multipoint touch pinch gesture without real multipoint-touch hardware,
for example, in a development environment on a standard PC. Simply hold down the
<Ctrl> key on the keyboard, then press and drag with the left mouse button.

\section gesturesinmtf APIS related to gestures

MeeGo Touch provides several event handlers for gestures:

- MWidget::gestureEvent
- MWidget::tapAndHoldGestureEvent
- MWidget::panGestureEvent
- MWidget::pinchGestureEvent
- MWidget::tapGestureEvent
- MWidget::swipeGestureEvent

These event handlers can be re-implemented to act upon all or specific gestures, in the same way as the existing
methods QGraphicsItem::mousePressEvent, QGraphicsItem::mouseReleaseEvent, and so on.

There are also corresponding methods in both the MWidgetController and the MWidgetView for extending or writing
new MeeGo Touch common components.

Gestures are not delivered to widgets by default, gesture delivery is enabled by the QGraphicsObject::grabGesture method.
Using this method will cause the framework to deliver gesture events, but the mouse press/move/release sequences
will not be broken by the Cancel events. To enable it one should use MWidget::grabGestureWithCancelPolicy method,
specifying also the policy for sending Cancel events.

MeeGo Touch currently replaces some of the default Qt gesture recognizers with versions capable of
interpreting regular mouse events in addition to the touch events used by Qt. Pan and swipe are also
one-finger gestures in MeeGo Touch, while they are two- and three-finger gestures, respectively, in Qt (as of version 4.7).

\section gestureexample Gestures examples and tips for applications

The examples/gestures directory of the MeeGo Touch source contains a sample application demonstrating proper use of
gestures combined with MeeGo Touch widgets. The example is a gallery application, where pinching zooms and rotates the picture simultaneously, while swiping left or right changes the picture.

The example below illustrates the following:
- Enabling multitouch handling through setAcceptTouchEvents(true);
- Enabling gesture delivery through grabGesture
- Transforming the picture by calculating the rotation and scale factors using the pinch
- The ease of detecting and acting on a swipe gesture
- Best practices of detecting the gesture on the largest surface available

Below is the example code relevant to the gestures:

\dontinclude gestures/mypage.cpp

\skip MyPage::MyPage
\until grabGesture(Qt::SwipeGesture);

\skip // The gesture handlers
\until // End of the gesture handlers

*/
