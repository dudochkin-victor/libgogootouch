%TOC%
/*! \page plainqt Developing Qt applications for Maemo 5 and MeeGo


\section  audience  Audience

This section targets established Qt developers who would like to use Qt to develop an application for Maemo 5 or MeeGo, without the need to use the native frameworks, Hildon and MeeGo Touch, respectively. Native development is not covered in this section.


\section  intro  Introduction

Since Qt is a cross-platform development framework, the same source code for a Qt application can be compiled on different operating systems without changes and without any custom code. As a result, your application visually integrates into the given environment, whether it is Linux, Windows, or Mac OS X.

This is, of course, also true for Maemo 5 and MeeGo. Compiling your Qt desktop application on the Maemo platform results in an application that comes very close to the native look and feel. On Maemo 5, your application mimics the theming and the habits of applications that are built on top of the Hildon framework. On MeeGo, it emulates the appearance and the behaviour of "native" MeeGo Touch applications.

When developing a Qt application for the MeeGo Touch platform, keep the mobile environment and the philosophy behind MeeGo Touch in mind. The following sections give some guidelines for ensuring a good user experience.

\section  style  How Maemo 5 and MeeGo affect the look and feel of your application

Your Qt application adjusts its look and feel on both Maemo 5 and MeeGo to emulate the user interface of each platform:

- The "Maemo 5" style emulates the appearance of the Gtk-based Hildon framework. The Maemo 5 style is included with the special version of Qt that is shipped together with the N900 device series.
- The "MeeGo" style mimics the widgets and interaction that is typical for the Qt-based MeeGo Touch framework. The MeeGo Touch style is part of the libmeegotouch framework and is shipped as one of its packages.

Both styles take theme changes automatically into account. However, since the style is not identical to a truly native application, there can be slight differences in terms of look and behaviour compared to a "real" Maemo 5 or MeeGo application. You can reduce these differences by taking certain typical requirements of the platforms into account.

While the target framework and the implementations are different, both styles share several characteristics. Thus, if your style looks fine on one of the two platforms, it is quite likely that it has a comparable appearance on the other platform as well.

Maemo 5 and MeeGo Touch styles not only modify the theming but they also ensure that your application becomes finger-usable and makes use of the default services and resources provided through each framework.

Compared to other Qt styles, the Maemo 5 and MeeGo Touch styles go way beyond simple widget styling. They have a significant impact on the way dialogs are shown:

- The style automatically follows theme changes on Maemo 5 or MeeGo.
- Feedback and gesture support is automatically added.
- The virtual keyboard is supported out of the box.
- Menu bars are not shown on top of the window or the screen. Instead, they are activated through the navigation bar and provided as finger-usable dialogs.
- Dialogs are always displayed in their full width. They cover a significant portion of the screen.
- Default dialogs (such as the file dialogue) are automatically replaced withMaemo equivalents.
- The style provides kinetic scrolling for lists and scroll areas.
- Scroll bars are only provided as indicators and appear during scrolling.
- The style supports change in orientation.


In Qt, you can change the style from the command line:

\code
yourapp -style maemo5
\endcode

or

\code
yourapp -style meegotouch
\endcode

Note: The Maemo 5 style is only available as a part of the special Qt version that comes with Maemo 5 support, while the MeeGo Touch style is provided by the libmeegotouch framework.
On both Maemo 5 and MeeGo Touch platforms, the platform style is used by default for plain Qt applications.

You can change the style either with the \c -style command line parameter or in your source code with the \c QStyle API. However, it is not generally recommended since the default styles provided with Qt are not finger-usable.


\section  usability  Achieving a good user experience

The user interface of the Maemo and MeeGo platform is optimised for the specific requirements of the device and the needs of your target audience. This results in a user interface that is significantly different from the desktop paradigm.

The deployment scenario for a plain Qt application is generally one of the following:

- You are developing a true cross-platform plain Qt application. Your application uses the same source code to cover all platforms.
- You are working on a plain Qt application that is specifically optimised for use on the Maemo or MeeGo platform (or on mobile devices in general).

In both cases, it is most likely that the resulting user experience does not match the quality of a true MeeGo Touch application. Follow the recommendations below to improve the user experience provided by your application.

\subsection taskoriented Creating a workflow-driven user interface

First and foremost, the user interface of Maemo or MeeGo applications is much simpler than a typical desktop application. This is due to the obvious limitations in terms of screen size. Due to these constraints, the application developer must understand the tasks performed by a user. This helps you create a user interface that does not get in the way of the user and is easy to use.

If your application has been originally developed for the desktop, reconsider the user interface. Desktop applications are often unnecessarily cluttered with controls. An over-loaded UI does not only exceed the space that is available on the mobile platform, but also typically overwhelms novice users on the desktop.
Streamlining the UI helps you create a good user experience on the mobile platform and makes your application easier to use on the desktop as well.
Streamlining does not necessarily mean that you need to remove functionality, often you just need to rearrange your UI so that it is more task-driven and follows the actual workflow of the user.

\subsection sizeindependent Make your application independent of resolution and available size

The N900 running on Maemo is a small device, whereas MeeGo Touch supports a range of devices with different screen sizes.
Thus, it is important that, despite the high resolution, it is possible to easily recognise all visual parts of the UI from a reasonable distance.
For normal ready-made QWidgets (such as \c QPushButton, \c QMenu), the style takes care of this automatically.
Note: The styling of widgets is carried out according to the properties defined in the MeeGo Touch CSS. Therefore, in some cases (such as with fonts and geometries), the properties provided by Qt itself are not used.

Whenever possible, instead of hard-coding custom widgets and views:

- Use layouts that can be expanded to the available size.
- Use the dpi information provided by the style to calculate a reasonable physical size for the displayed object.

It also needs to be possible to resize the application window and dialogs so that they fit into the space that is horizontally available on the device. On the N900 the width of the display in landscape mode is 800 pixels. So your application needs to fit into this minimum screen width. When designing the UI of your application, you should also consider that the translated texts may require more space.

Tool bars should only contain the most important features that are necessary for performing tasks. Ideally, the whole tool bar should fit completely onto the screen.


\subsection fingerusable Ensure that your application stays finger-usable

The MeeGo Touch Framework allows users to navigate by using their fingers.
This means that you need to think carefully about the size of custom widgets and ensure that all functionalities are accessible with a left-click or gestures.
There are some common pitfalls resulting from the faulty assumption that the user is using a mouse pointer. To avoid these:

- Double-click should be avoided.
- Context menus (which are usually invoked with a right-click) are available through tap and hold interaction and should not be used for primary interactions.
- Dragging operations are not supported typically as they conflict with panning.
- Touch displays do not support "hovering". Thus, avoid mouse hovering as the only way to access a functionality provided by the application.
- Both frameworks switch off the cursor ("mouse pointer") of the application. So your application should be usable even if the cursor is not visible on the screen.
- Since there is no such concept as a visible widget focus rectangle, your application needs to be intuitively usable without them.
- Do not use your own styling on QWidgets. This means that you should not set a custom style to a widget, use CSS for a widget, or even manipulate a widget's palette. Your own styling may be ignored by the MeeGo Touch Qt style or even break the styling and make the widget unusable.


\section avoid Things to avoid

\subsection avoidWidgets Avoid fancy widgets

There are a few classes which are either not styled by the MeeGo Touch style or are otherwise inconsistent. Try to avoid the following:

- \c QDial
- \c QLCDNumber
- \c QMdiArea, \c QMdiSubWindow (as well as the whole MDI concept)
- \c QSplitter
- \c QSystemTrayIcon (since Maemo does not support the system tray)
- \c QToolBox
- \c QToolTip

\subsection avoidClever Avoid overly clever UI design

Avoid too complex UI design by following these guidelines: 

- Do not hardcode sizes and colours.
- Avoid complex layouts.
- Do not display multiple windows at once. Instead, use a set of modal dialogs which appear in the order of the workflow.
- Do not provide your own custom kinetic scrolling implementation for list views and scroll areas. Kinetic scrolling is provided by the platform styles already and custom implementation may cause clashes. 
- Do not use \c QObject::disconnect() to disconnect all widget signals.
- Do not disconnect any widget signals that you have not connected yourself.
- Do not remove any eventFilter classes from widgets that you did not install yourself.
- Do not set widget flags manually. Especially flags that affect the painting may cause invalid results.

There are also some non-standard practices that do not prevent the style from working. However, if the style delivers unexpected results, take these issues into account:

- If the behaviour of your application is untypical of Qt, this may cause problems. For example, if the application sets a modal flag on a QWidget and then shows it with \c QWidget::show().
- Custom widgets cannot be fully adopted by the style and are treated as blank QWidgets. Since the widget background may be removed and, due to the widget, may not be scaled, it may be unusable on the device's display. If this is the case, you can use the \c NoDuiStyle dynamic property as described above.

\subsection avoidTimer Keep the battery in mind

Power saving is especially important for applications that run on a mobile platform:

- Avoid instances of \c QTimer running permanently in your application. \c QTimer repeatedly wakes up your CPU. Therefore you should keep the use of \c QTimer low.


\section maemo5widgets Maemo 5 widgets

The following widgets are specific for the Maemo 5 platform:

- \c QMaemo5AbstractPickSelector
- \c QMaemo5DatePickSelector
- \c QMaemo5DateTimePickSelector
- \c QMaemo5EditBar
- \c QMaemo5InformationBox
- \c QMaemo5ListPickSelector
- \c QMaemo5TimePickSelector
- \c QMaemo5ValueButton

It is not recommended that you use these widgets since it is most likely that they will not be included in the MeeGo Touch platform.


\section API MeeGo Touch Qt style API

The MeeGo Touch Qt style API determines the style on MeeGo Touch. The style is set with dynamic properties and literal strings to avoid headers from MeeGo Touch or linking against any MeeGo Touch library. Thus, the plain Qt application is independent of the target platform.

To disable styling for your own custom widget, use the dynamic property \c NoMStyle. For a custom widget instance "mywidget", it would be:

\code
    mywidget->setProperty("NoMStyle", true);
\endcode

Disable styling only if the style renders a certain custom widget unusable, which is very rare in practice.
Note: This only disables styling for this particular widget. It does not affect the children of "mywidget".

If you run into problems with the style or want to completely disable the MeeGo Touch Qt style for your application, you can also set the dynamic property directly for QApplication:

\code
    qApp->setProperty("NoMStyle", true);
\endcode

With the MeeGo Touch Qt style you can also disable some elements that are added by the style, for example, the status bar or the navigation bar.

Disabling the status bar:
\code
    qApp->setProperty("NoMStatusBar", true);
\endcode

Disabling the navigation bar:
\code
    qApp->setProperty("NoMNavigationBar", true);
\endcode

When disabling the navigation bar, your application does not display the Close and Minimise buttons anymore. Thus, the developer needs to close and minimise the application.

The style also provides a basic API for supporting orientation changes on the device. For most QWidget-based Qt applications it is difficult to implement an orientation change, but for some cases, such as QML- or QGraphicsView-based applications, it can be useful. Therefore the orientation change support of the style is opt-in which means the application needs to tell the style whether it would like to support the orientation change.
Note: The orientation change support only adjusts the window decorations to the new orientation. You have to take care of rotating the application's content yourself!

You can activate the orientation change for your application like this:
\code
    QMetaObject::invokeMethod(app.style(), "setOrientationChangeEnabled", Q_ARG(bool, true));
\endcode

Once the orientation change is enabled, the style sends you a signal, as soon as an orientation change happens. The signal tells you the new orientation in degrees. For reacting on the orientation change simply connect to this signal:
\code
    connect(style(), SIGNAL(orientationChanged(int)), this, SLOT(rotateGui(int));
\endcode

additionally you can always ask the style about its current orientation by calling:
\code
    int orientation = 0;
    QMetaObject::invokeMethod(style(), "orientation", Q_RETURN_ARG(int, orientation));
\endcode

You can also look at the qtstyleorientation demo application which shortly demonstrates how orientation change works.

The orientation change support is not fully implemented yet. It rotates the statusbar and the navigation bar, but menus and dialogs are not getting rotated yet.


The following figures illustrate the same view of an application on both supported platforms:

\image html qtstyleexample-pizza-freemantle.png "Example application on Maemo 5 (Fremantle)"

\image html qtstyleexample-pizza-harmattan.png "Example application on MeeGo"


\section  limitations Limitations of Qt support compared to native MeeGo Touch applications

Since MeeGo Touch and its widgets are based on \c QGraphicsView, some features cannot be emulated for plain \c QWidget-based widgets. The following MeeGo Touch features cannot be supported by the Maemo styles:

- Orientation change for ready-made \c QWidgets (not possible on MeeGo). Orientation change notification for custom widgets can be accessed through the Qt Mobility framework.
- Ready-made MeeGo Touch widget animations and effects (except for some common ones)


\section knownissues Known issues and common problems

- Be careful with top-level widgets: The style takes care of window management. To accomplish, this all top-level windows are reparented into a new layout. This does not fully comply with the Qt's API promise, since windows created by the application developer cannot be identified or accessed later on with methods such as \c QWidget::window() or \c QWidget::activeWindow().

- "Stacked windows": At this point the concept of "stacked windows" is not supported.
*/
