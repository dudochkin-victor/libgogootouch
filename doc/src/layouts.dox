/*! \page layouts Layout and policies

\section basics Introduction

MeeGo Touch includes a set of layout management classes that are used to describe how widgets are laid out in an application's user interface. These layouts automatically position and resize widgets when the amount of available space changes, which ensures that they are consistently arranged and that the user interface as a whole remains usable.

There are two different sets of layout classes.

The first is provided by Qt, and inherited from QGraphicsLayout, including QGraphicsLinearLayout, QGraphicsGridLayout, and so on.  These Qt classes provide an easy way to place items as you want.

The second set of layout classes is provided by MeeGo Touch, and they offer additional features, at the cost of slightly more overhead.  The MeeGo Touch classes work in a slightly different way - there is a single MLayout to which you can add one or more policies that inherit MAbstractLayoutPolicy.  This allows a single layout to have multiple policies, with one active at a given time.  A different policy can be made active at any time, causing the items within the layout to move into their new position.

The multiple policies in a single MLayout do not even need to contain the same items.  New items are shown and hidden as necessary (Unless the item is itself a layout, since a layout cannot be directly hidden itself. However, if a layout is inside a widget which is inside a layout, it is hidden.  See \ref layout-inside-layout).

\section tips Tips for using layouts
\li When you use a layout or layout policy, you do not need to pass a parent when constructing the child widgets. The layout automatically reparents the widgets so that they are children of the widget on which the layout is installed.  When the parent widget is deleted, its layout and all of its children are also deleted.

\li Widgets in a layout are children of the widget on which the layout is installed, not of the layout itself. Widgets can only have other widgets as parent, not layouts.  You can nest layouts using addLayout() on a layout; the inner layout then becomes a child of the layout it is inserted into.

\li You can have one policy in landscape mode and another policy in portrait mode.  You do not even need to have the same items in both modes.

\li If you only want to switch between a horizontal and vertical linear layout policy, you can use MLinearLayoutPolicy::setOrientation() instead of multiple policies.

\li For a complex set of nested layouts, it is easier and more lightweight to use nested \link QGraphicsLayout QGraphicsLayouts\endlink than to try to nest \link MLayout MLayouts \endlink.

\li For more information, tips, and examples, see the QLayout and QGraphicsLayout documentation.

\section rtl Right-to-left layouts

In right-to-left languages, such as Arabic, the layouts are automatically reversed.  This is usually the correct behaviour. However, you can override this by directly calling
QGraphicsWidget::setLayoutDirection().
For example, the calculator example has the following code snippet:

\dontinclude calculator/calculatorwidget.cpp
\skip CalculatorWidget::CalculatorWidget
\until MLayout *layout

\section pagelayout-widgetSize Widget sizes

To determine the size of a widget in a layout, the layout uses the widget's QGraphicsLayoutItem::preferredSize() and its QGraphicsLayoutItem::sizePolicy() functions.  The preferred size of a MWidgetController is determined as follows:

-# The constraint passed to the MWidgetController::sizeHint() function - usually due to the layout.
-# Developer set hints (using QGraphicsLayoutItem::setPreferredSize(), and so on).
-# Style set size (for example, from the CSS files).
-# View's MWidgetView::sizeHint() function.
-# MWidgetController::layout()->QGraphicsLayoutItem::sizeHint() function.

The sizes given from the first 3 steps are combined, in the above order of preference.
If the height and/or width are not specified, the MWidgetView::sizeHint() function is called, with
\a constraint parameter set to the size determined so far.  The result from the view is then combined with
the constraint.

Finally, if this size is still not valid, the size is combined with QGraphicsWidget::sizeHint() which
in turn uses the layout's QGraphicsLayoutItem::sizeHint() function.

If you create your widget and its width depends on its height, its size policy must have set QSizePolicy::hasHeightForWidth().

\see MWidgetView::sizeHint()

\section main Main policies
\li MLinearLayoutPolicy - For placing items horizontally or vertically:

\image html mlinearlayoutpolicy.jpg

\li MGridLayoutPolicy - For placing items in a grid:

\image html mgridlayoutpolicy.jpg

\li MFlowLayoutPolicy - For placing items on a horizontal line, overflowing onto the next line:

\image html mflowlayoutpolicy.jpg

\li MFreestyleLayoutPolicy - For placing items freely, but preventing items from overlapping:

\image html mfreestylelayoutpolicy.jpg

\section multiple Multiple policies

Multiple policies can be assigned to a layout.  It is particularly useful to have one policy in 
portrait mode and another policy in landscape mode. For \ref layout-multiplepolicies "example":

\image html mlayout_multiplepolicies.jpg

A more concrete example is given with the \ref example-calculator "example calculator" application.

\htmlonly <center><a href="example-calculator.html"><img src="calculator_landscape_small.png"></a>
<a href="example-calculator.html"><img src="calculator_portrait_small.png"></a></center> \endhtmlonly

\sa \ref layout-multiplepolicies, \ref example-calculator, \ref layout-inside-layout, MLayout

\section usingqgraphicslayout Advanced layout with QGraphicsLayout

For advanced item layout, you can place multiple layouts together.  The easiest way to do this is 
to use a mix of MLayouts and QGraphicsLayout, and use a MLayout only when animations and multiple 
policies are required.

For example, if you use multiple \link QGraphicsLinearLayout QGraphicsLinearLayouts \endlink, you 
create a layout where items are placed in rows, but they do not line up vertically. 
For \ref layout-qgraphicslayout "example":

\image html qgraphicslayout_small.png

\sa \ref layout-qgraphicslinearlayout, \ref layout-qgraphicsgridlayout, \ref layout-qgraphicslayout


\section layouts-example Example code

\li \ref layout-qgraphicslinearlayout
\li \ref layout-qgraphicsgridlayout
\li \ref layout-mlinearlayoutpolicy
\li \ref layout-mgridlayoutpolicy
\li \ref layout-mflowlayoutpolicy
\li \ref layout-mfreestylelayoutpolicy
\li \ref layout-multiplepolicies
\li \ref layout-inside-layout
\li \ref example-calculator
\li \ref layout-qgraphicslayout
*/
