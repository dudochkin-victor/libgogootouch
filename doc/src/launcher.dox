/*! \page launcher Writing launchable applications

Launcher makes it possible to start up various types of applications very
quickly. Launcher uses a different <em>booster</em> for each of the
application types. This section concentrates on launching MeeGo Touch
applications with the MeeGo Touch booster, but also other boosters are
briefly introduced at the end of the section.

\section intro Introduction

The launcher can start an application if the following pre-requisites are met:

\li MApplication and MApplicationWindow instances are taken into use from
MComponentCache

\li application is compiled and linked to a position independent binary
(executable or library)

\li application is started with the \c invoker command instead of executing the
executable file.

\section howitworks How the launcher works

Applauncherd daemon makes it possible to launch applications faster. First of all, it preloads a number of 
libraries, including MeeGo Touch and Qt libraries. This makes it faster to load application binaries
when needed. Secondly, it initialises certain components before an
application is loaded and makes the results available to applications
when they start.

More technically, applauncherd forks a will-be-application process,
also called a booster, before knowing which application is 
launched next. Booster processes do application-type specific
initialisations. For instance, the MeeGo Touch booster instantiates
MApplication and MApplicationWindow objects and stores them to
MComponentCache. Then the booster process waits for a connection from
the \c invoker.

An application is invoked with the \c invoker. The invoker sends the
booster process the name and location of the application binary and
data on its running environment. This triggers the booster process to
load the binary, to initialise its environment, and finally to call
the \c main() function in the binary.

Boosted MeeGo Touch applications pick up and use the already
instantiated MApplication and MApplicationWindow objects from
MComponentCache instead of creating new ones.


\section source Modifying source code

MApplication instance must be taken from the MComponentCache. It is
recommended to take MApplicationWindow from the cache as well. Thus, the main program should have:

\code
MApplication* application = MComponentCache::mApplication(argc, argv);
MApplicationWindow* window = MComponentCache::mApplicationWindow();
\endcode

Note: Applications that use MComponentCache can be run without the
launcher/invoker as well. In that case, MComponentCache 
instantiates new MApplication and MApplicationWindow objects on the
fly.

The launcher needs to find the symbol \c main in an application binary
in order to start executing the application. However, unnecessary
symbols in the application binary cause unnecessary overhead, so the
recommended flags for compiling for the launcher hide symbols 
by default. When the flags are used, the main function must be
explicitly exported as follows:

\code
#include <MExport>

M_EXPORT int main(int argc, char **argv)
{
...
}
\endcode


\section compilation Compiling and linking

To compile binaries that can be run with applauncherd, use
\c -fPIC option to produce position-independent code. To
produce a position-independent executable, \c -pie option and \c
-rdynamic options can be used in linking. This makes it possible to execute the result both 
traditionally and with the invoker.

To improve linking and load times of shared object libraries the size
of dynamic export table it is encouraged to hide the unnecessary
symbols from the resulting binary by using \c -fvisibility=hidden and
\c -fvisibility-inlines-hidden flags in compilation as well.

\subsection qmaketips Building with QMake

\subsubsection qmakepreferred Building in the preferred way

Once you have installed the \c libmeegotouch-dev package, simply use QMake configuration option 
\c meegotouch-boostable:

\code
CONFIG += meegotouch-boostable
\endcode

This tells qmake to use the \c meegotouch-boostable feature, which
includes the \c meegotouch feature and ultimately uses \c pkg-config for the
flags. Unfortunately qmake does not complain if you add the line but
have not installed \c libmeegotouch-dev, so if the QMake magic does
not seem to work, double-check that the package is indeed installed.

\subsubsection qmakeother Building with pkg-config

Use the \c pkg-config to get the correct flags:

\code
QMAKE_CXXFLAGS += `pkg-config --cflags meegotouch-boostable`
QMAKE_LFLAGS += `pkg-config --libs meegotouch-boostable`
\endcode

If \c libmeegotouch-dev is not installed, \c pkg-config 
complains when you run \c make.

\subsubsection qmakelastresort The last resort

Manually define the following variables in the .pro file:

\code
QMAKE_CXXFLAGS += -fPIC -fvisibility=hidden -fvisibility-inlines-hidden
QMAKE_LFLAGS += -pie -rdynamic
\endcode

It is then up to you to modify the .pro file if there are changes to the
required compiler and linker flags.

\subsection cmaketips Building with CMake

1. Use \c pkg-config in CMake by including \c FindPkgConfig in \c CMakeLists.txt:

\code
include(FindPkgConfig) 
\endcode

2. To obtain the compiler and linker flags, add the following lines:

\code
pkg_check_modules(MEEGOTOUCH_BOOSTABLE REQUIRED meegotouch-boostable)
add_definitions(${MEEGOTOUCH_BOOSTABLE_CFLAGS})
link_libraries(${MEEGOTOUCH_BOOSTABLE_LDFLAGS})
\endcode  

If you do not want to use \c pkg-config for some reason, you can manually add the
compiler and linker flags as follows:

\code
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fvisibility=hidden -fvisibility-inlines-hidden")
set(CMAKE_EXE_LINKER_FLAGS "-pie -rdynamic")
\endcode  

Again, you need to update the flags if something changes.

\subsection pkgconfig Obtaining flags with pkg-config

The package \c libmeegotouch-dev provides the necessary files for
\c pkg-config to get the appropriate compiler and linker flags.

1. To get the compiler flags, use the following:

\code
pkg-config --cflags meegotouch-boostable
\endcode

2. To get the linker flags, use the following:

\code
pkg-config --libs meegotouch-boostable
\endcode

\section running Running boosted application

Check that applauncherd package is installed and applancherd daemon is
running. You can now run your application as usual as
/usr/bin/application_binary, or use the mboosted launching by running:

\code
invoker --type=m /usr/bin/application_binary
\endcode

\section splash Splash screen

NOTE: The splash screen implementation is not available yet, so this
section is for future reference only.

Applauncherd supports showing a splash screen if there is mcompositor
(the MeeGo window manager) running.

The splash screen is not shown by default. If an application wants it
to be shown, it must pass \c --splash, and optionally \c --splash-landscape
arguments to the invoker.

For instance,

\code
/usr/bin/invoker --splash=/usr/share/application_name/splash.jpg \
		 --splash-landscape=/usr/share/application_name/splash-l.jpg \
		 --type=m \
		 /usr/bin/application_name
\endcode

shows the splash screen with \c splash.jpg as its content when the device
is in the portrait orientation. Otherwise \c splash-l.jpg is shown. If
only \c --splash is given, that image is shown in both orientations.

Invoker passes the splash request to the booster. The booster sends
the splash request to the window manager by setting a window property
to window manager's window.

If the filenames do not include absolute paths, the window manager
looks for the files from a default location.

\section debugging Debugging

To debug a launched application, the debugger must be attached
to an already running booster process. For instance: 

1. Run the following command:

\code
gdb /usr/bin/applauncherd.bin $(pgrep booster-m)
\endcode

2. Set a breakpoint to the application code and let the process
continue to that point:

\code
(gdb) break main.cpp:42
No source file named main.cpp.
Make breakpoint pending on future shared library load? (y or [n]) y

Breakpoint 1 (main.cpp:42) pending.
(gdb) c
Continuing.
\endcode

3. Invoke the application with the booster to which the debugger
is attached:

\code
invoker --type=m /usr/bin/application_binary
\endcode

\subsection pie-binaries PIE binaries and debugging

If you use the \c pkg-config when building your binaries, they are
linked with the \c -pie flag. The \c -pie flag  makes your binaries
\e position \e independent \e executables. This means that the executables
can be either used as a normal shared library or run, for example, from
the command line.

This creates problems when debugging your application with gdb older than
version 7.1 which introduced the support for PIE binaries.

To use gdb 7.0 or earlier, link your binaries as
libraries by using \c -shared instead of \c -pie. After this, you cannot
execute your binaries directly, you have to use \c invoker.

Setting correct linker flags with QMake:

\code
QMAKE_CXXFLAGS += -fPIC -fvisibility=hidden -fvisibility-inlines-hidden
QMAKE_LFLAGS += -shared -rdynamic
\endcode

Remember to remove the CONFIG += meegotouch-boostable, if used.

\section packaging Packaging and distributing

\c .desktop and D-Bus \c .service files can be modified so that 
normal execution is replaced with the following:

\code
Exec=/usr/bin/invoker --type=m /usr/bin/<application_name>
\endcode

By default, invoker waits for the application to terminate and exits with
the same exit code. Most Unix signals received by invoker are forwarded to the application.

Note 1: Do not use --no-wait in D-Bus service files, otherwise D-Bus daemon may think that the application just died before registering its service. 

Note 2: When .desktop file contains the X-Maemo-Service field, the application 
is started by default through D-Bus. This might cause some delay for
application start-up time. Therefore it is recommended not to have the 
X-Maemo-Service field inside .desktop files with launched applications,
unless it is really needed for some other reason.

Application packages that use the launcher depend on the applauncherd
package.

\section security Platform security

If an application does not have an aegis manifest file, no actions are
needed for platform security.

If an application has a manifest file, an addition needs to be made
there: everything that is requested for the application binary must be
requested to the application launcher binary as well.

For instance, manifest file for an application that needs only an
automatically generated application ID:

\code
<aegis>
  <request>
    <for path="/usr/bin/application_name" />
    <for path="applauncherd-launcher::/usr/bin/applauncherd.bin" id="" />
  </request>
</aegis>
\endcode

If an application has a user-defined ID:

\code
<aegis>
  <request>
    <for path="/usr/bin/application_name" id="myownid" />
    <for path="applauncherd-launcher::/usr/bin/applauncherd.bin" id="myownid" />
  </request>
</aegis>
\endcode

Finally, if an application has some security tokens:

\code
<aegis>
  <request>
    <credential name="GlobalToken" />
    <credential name="OwnToken" />
    <credential name="package::OtherToken" />
    <for path="/usr/bin/application_name" />
    <for path="applauncherd-launcher::/usr/bin/applauncherd.bin" id="" />
  </request>
</aegis>
\endcode

\section limitations Limitations and known issues

\subsection issue-cmdline Issues with command line arguments

Current launcher implementation does not support the following Qt and
MeeGo Touch command line options. For more information about using command options, see 
QApplication and MApplication documentation. 

\li  \c -style
\li  \c -stylesheet
\li  \c -session
\li  \c -widgetcount
\li  \c -reverse
\li  \c -graphicssystem
\li  \c -display
\li  \c -geometry
\li  \c -fn
\li  \c -font
\li  \c -bg
\li  \c -background
\li  \c -fg
\li  \c -foreground
\li  \c -btn
\li  \c -button
\li  \c -name
\li  \c -title
\li  \c -visual
\li  \c -ncols
\li  \c -cmap
\li  \c -im
\li  \c -inputstyle
\li  \c -genimglist
\li  \c -remote-theme
\li  \c -fullscreen
\li  \c -disable-m-input-context

QCoreApplication::arguments() returns a QStringList which contains 32 arguments at the most and 
drops the rest. The full list of arguments is accessible through \c argc and \c argv. They can be 
converted into QStringList similar to returned by QCoreApplication::arguments() as
follows:

\code
M_EXPORT int main(int argc, char **argv) {
    QStringList arguments;
    for (int a = 0; a < argc; ++a) {
        arguments << QString::fromLocal8Bit(argv[a]);
    }
    ...
\endcode

\section sample Sample MeeGo Touch launchable application

\code
#include <MApplication>
#include <MApplicationPage>
#include <MApplicationWindow>
#include <MComponentCache>
#include <MExport>

M_EXPORT int main(int argc, char ** argv)
{
    MApplication *app = MComponentCache::mApplication(argc, argv);
    MApplicationWindow* window = MComponentCache::mApplicationWindow();
    MApplicationPage mainPage;

    window->show();

    mainPage.setTitle("Hello World! (Now supports Launcher)");
    mainPage.appear();
 
    int ret = app->exec();
    delete app;
 
    return ret;
}
\endcode

\section otherboosters Other boosters

Warning: Behaviour of these boosters is subject to change.

Qt booster is a no-operation booster. It can be used by calling \c
invoker \c --type=qt. Qt booster requires only that main() is exported
with M_EXPORT (or Q_DECL_EXPORT).
Any MeeGo Touch boostable application can be launched with this booster type as well, but it results in a slower start-up
because of empty cache.
*/

